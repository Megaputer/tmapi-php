<?php
/**
 * SentimentsResponseAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  TmApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TmApi\Model;

use \ArrayAccess;
use \TmApi\ObjectSerializer;

/**
 * SentimentsResponseAttributes Class Doc Comment
 *
 * @category Class
 * @description Sentiment attributes. Depends on sentiment type
 * @package  TmApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SentimentsResponseAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SentimentsResponse_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subject' => 'string',
        'evaluation' => 'string',
        'object' => 'string',
        'head_object' => 'string',
        'degree' => 'int',
        'aspect' => 'string',
        'confidence' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'subject' => null,
        'evaluation' => null,
        'object' => null,
        'head_object' => null,
        'degree' => 'int32',
        'aspect' => null,
        'confidence' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subject' => 'Subject',
        'evaluation' => 'Evaluation',
        'object' => 'Object',
        'head_object' => 'HeadObject',
        'degree' => 'Degree',
        'aspect' => 'Aspect',
        'confidence' => 'Confidence'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subject' => 'setSubject',
        'evaluation' => 'setEvaluation',
        'object' => 'setObject',
        'head_object' => 'setHeadObject',
        'degree' => 'setDegree',
        'aspect' => 'setAspect',
        'confidence' => 'setConfidence'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subject' => 'getSubject',
        'evaluation' => 'getEvaluation',
        'object' => 'getObject',
        'head_object' => 'getHeadObject',
        'degree' => 'getDegree',
        'aspect' => 'getAspect',
        'confidence' => 'getConfidence'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['evaluation'] = isset($data['evaluation']) ? $data['evaluation'] : null;
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['head_object'] = isset($data['head_object']) ? $data['head_object'] : null;
        $this->container['degree'] = isset($data['degree']) ? $data['degree'] : null;
        $this->container['aspect'] = isset($data['aspect']) ? $data['aspect'] : null;
        $this->container['confidence'] = isset($data['confidence']) ? $data['confidence'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['degree']) && ($this->container['degree'] > 5)) {
            $invalidProperties[] = "invalid value for 'degree', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['degree']) && ($this->container['degree'] < -5)) {
            $invalidProperties[] = "invalid value for 'degree', must be bigger than or equal to -5.";
        }

        if (!is_null($this->container['confidence']) && ($this->container['confidence'] > 1)) {
            $invalidProperties[] = "invalid value for 'confidence', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['confidence']) && ($this->container['confidence'] < 0)) {
            $invalidProperties[] = "invalid value for 'confidence', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Either the speaker himself or another person (a group of people) whose opinion is shared. The subject of evaluation is not always mentioned in a text, especially when we deal with informal texts, such as forums, blogs and social network posts.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets evaluation
     *
     * @return string|null
     */
    public function getEvaluation()
    {
        return $this->container['evaluation'];
    }

    /**
     * Sets evaluation
     *
     * @param string|null $evaluation Implies the emotional judgment of a subject to some topic, an emotional reaction to something or the overall emotional tone of an utterance. Evaluation expresses an attitude of a subjeсt to a particular object, emotional response to something.
     *
     * @return $this
     */
    public function setEvaluation($evaluation)
    {
        $this->container['evaluation'] = $evaluation;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object It is something which is evaluated. Similar to the subject of evaluation, objects may not always be mentioned.
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets head_object
     *
     * @return string|null
     */
    public function getHeadObject()
    {
        return $this->container['head_object'];
    }

    /**
     * Sets head_object
     *
     * @param string|null $head_object The main words in a phrase.
     *
     * @return $this
     */
    public function setHeadObject($head_object)
    {
        $this->container['head_object'] = $head_object;

        return $this;
    }

    /**
     * Gets degree
     *
     * @return int|null
     */
    public function getDegree()
    {
        return $this->container['degree'];
    }

    /**
     * Sets degree
     *
     * @param int|null $degree It is used to refer to the degree of positive evaluation ranging from 1 to 5 (1-rather positivem 5 - extremely positive) and negative evaluation ranging from -1 to -5 (-1 rather negative, - 5 - extremely negative).
     *
     * @return $this
     */
    public function setDegree($degree)
    {

        if (!is_null($degree) && ($degree > 5)) {
            throw new \InvalidArgumentException('invalid value for $degree when calling SentimentsResponseAttributes., must be smaller than or equal to 5.');
        }
        if (!is_null($degree) && ($degree < -5)) {
            throw new \InvalidArgumentException('invalid value for $degree when calling SentimentsResponseAttributes., must be bigger than or equal to -5.');
        }

        $this->container['degree'] = $degree;

        return $this;
    }

    /**
     * Gets aspect
     *
     * @return string|null
     */
    public function getAspect()
    {
        return $this->container['aspect'];
    }

    /**
     * Sets aspect
     *
     * @param string|null $aspect It is a word or phrase that defines what characteristic of the object is evaluated. It allows users to summarize different ways of expressing the same entity in one thematic section.
     *
     * @return $this
     */
    public function setAspect($aspect)
    {
        $this->container['aspect'] = $aspect;

        return $this;
    }

    /**
     * Gets confidence
     *
     * @return float|null
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param float|null $confidence It represents measure of how sure TM API Server in its conclusion. Confidence is measured on scale of 0.0 to 1.0.
     *
     * @return $this
     */
    public function setConfidence($confidence)
    {

        if (!is_null($confidence) && ($confidence > 1)) {
            throw new \InvalidArgumentException('invalid value for $confidence when calling SentimentsResponseAttributes., must be smaller than or equal to 1.');
        }
        if (!is_null($confidence) && ($confidence < 0)) {
            throw new \InvalidArgumentException('invalid value for $confidence when calling SentimentsResponseAttributes., must be bigger than or equal to 0.');
        }

        $this->container['confidence'] = $confidence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


