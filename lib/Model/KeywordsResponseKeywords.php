<?php
/**
 * KeywordsResponseKeywords
 *
 * PHP version 5
 *
 * @category Class
 * @package  TmApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TmApi\Model;

use \ArrayAccess;
use \TmApi\ObjectSerializer;

/**
 * KeywordsResponseKeywords Class Doc Comment
 *
 * @category Class
 * @package  TmApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class KeywordsResponseKeywords implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'KeywordsResponse_keywords';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'keyword' => 'string',
        'negated' => 'bool',
        'part_of_speech' => 'string',
        'significance' => 'float',
        'support' => 'int',
        'frequency' => 'int',
        'positions' => '\TmApi\Model\KeywordsResponsePositions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'keyword' => null,
        'negated' => null,
        'part_of_speech' => null,
        'significance' => null,
        'support' => 'int32',
        'frequency' => 'int32',
        'positions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keyword' => 'keyword',
        'negated' => 'negated',
        'part_of_speech' => 'partOfSpeech',
        'significance' => 'significance',
        'support' => 'support',
        'frequency' => 'frequency',
        'positions' => 'positions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keyword' => 'setKeyword',
        'negated' => 'setNegated',
        'part_of_speech' => 'setPartOfSpeech',
        'significance' => 'setSignificance',
        'support' => 'setSupport',
        'frequency' => 'setFrequency',
        'positions' => 'setPositions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keyword' => 'getKeyword',
        'negated' => 'getNegated',
        'part_of_speech' => 'getPartOfSpeech',
        'significance' => 'getSignificance',
        'support' => 'getSupport',
        'frequency' => 'getFrequency',
        'positions' => 'getPositions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PART_OF_SPEECH_NOUN = 'Noun';
    const PART_OF_SPEECH_VERB = 'Verb';
    const PART_OF_SPEECH_ADVERB = 'Adverb';
    const PART_OF_SPEECH_ADJECTIVE = 'Adjective';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartOfSpeechAllowableValues()
    {
        return [
            self::PART_OF_SPEECH_NOUN,
            self::PART_OF_SPEECH_VERB,
            self::PART_OF_SPEECH_ADVERB,
            self::PART_OF_SPEECH_ADJECTIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keyword'] = isset($data['keyword']) ? $data['keyword'] : null;
        $this->container['negated'] = isset($data['negated']) ? $data['negated'] : null;
        $this->container['part_of_speech'] = isset($data['part_of_speech']) ? $data['part_of_speech'] : null;
        $this->container['significance'] = isset($data['significance']) ? $data['significance'] : null;
        $this->container['support'] = isset($data['support']) ? $data['support'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['positions'] = isset($data['positions']) ? $data['positions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPartOfSpeechAllowableValues();
        if (!is_null($this->container['part_of_speech']) && !in_array($this->container['part_of_speech'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'part_of_speech', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keyword
     *
     * @return string|null
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string|null $keyword Normalized keyword
     *
     * @return $this
     */
    public function setKeyword($keyword)
    {
        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets negated
     *
     * @return bool|null
     */
    public function getNegated()
    {
        return $this->container['negated'];
    }

    /**
     * Sets negated
     *
     * @param bool|null $negated Indicates negation in the semantics of the word and returns the boolean values
     *
     * @return $this
     */
    public function setNegated($negated)
    {
        $this->container['negated'] = $negated;

        return $this;
    }

    /**
     * Gets part_of_speech
     *
     * @return string|null
     */
    public function getPartOfSpeech()
    {
        return $this->container['part_of_speech'];
    }

    /**
     * Sets part_of_speech
     *
     * @param string|null $part_of_speech Part of speech of the keyword
     *
     * @return $this
     */
    public function setPartOfSpeech($part_of_speech)
    {
        $allowedValues = $this->getPartOfSpeechAllowableValues();
        if (!is_null($part_of_speech) && !in_array($part_of_speech, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'part_of_speech', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['part_of_speech'] = $part_of_speech;

        return $this;
    }

    /**
     * Gets significance
     *
     * @return float|null
     */
    public function getSignificance()
    {
        return $this->container['significance'];
    }

    /**
     * Sets significance
     *
     * @param float|null $significance How distinct a particular keyword is for the explored text. Significance is calculated on a scale of 0,00 to 100,00. The greater the significance, the greater the chance that the concepts in the investigated data revolve around such a word.
     *
     * @return $this
     */
    public function setSignificance($significance)
    {
        $this->container['significance'] = $significance;

        return $this;
    }

    /**
     * Gets support
     *
     * @return int|null
     */
    public function getSupport()
    {
        return $this->container['support'];
    }

    /**
     * Sets support
     *
     * @param int|null $support The number of different records containing the keyword
     *
     * @return $this
     */
    public function setSupport($support)
    {
        $this->container['support'] = $support;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int|null $frequency The number of times the keyword appears in the data
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \TmApi\Model\KeywordsResponsePositions[]|null
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \TmApi\Model\KeywordsResponsePositions[]|null $positions Keyword positions in text
     *
     * @return $this
     */
    public function setPositions($positions)
    {
        $this->container['positions'] = $positions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


