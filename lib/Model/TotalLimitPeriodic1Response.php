<?php
/**
 * TotalLimitPeriodic1Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  TmApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Megaputer Text Mining API
 *
 * Megaputer Text Mining API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TmApi\Model;

use \ArrayAccess;
use \TmApi\ObjectSerializer;

/**
 * TotalLimitPeriodic1Response Class Doc Comment
 *
 * @category Class
 * @package  TmApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TotalLimitPeriodic1Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TotalLimitPeriodic1Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ntu_period1' => 'string',
        'ntu_in_period1_limit' => 'int',
        'ntu_in_period1' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ntu_period1' => null,
        'ntu_in_period1_limit' => 'int32',
        'ntu_in_period1' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ntu_period1' => 'NTUPeriod1',
        'ntu_in_period1_limit' => 'NTUInPeriod1Limit',
        'ntu_in_period1' => 'NTUInPeriod1'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ntu_period1' => 'setNtuPeriod1',
        'ntu_in_period1_limit' => 'setNtuInPeriod1Limit',
        'ntu_in_period1' => 'setNtuInPeriod1'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ntu_period1' => 'getNtuPeriod1',
        'ntu_in_period1_limit' => 'getNtuInPeriod1Limit',
        'ntu_in_period1' => 'getNtuInPeriod1'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const NTU_PERIOD1_SECOND = 'Second';
    const NTU_PERIOD1_MINUTE = 'Minute';
    const NTU_PERIOD1_HOUR = 'Hour';
    const NTU_PERIOD1_DAY = 'Day';
    const NTU_PERIOD1_MONTH = 'Month';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNtuPeriod1AllowableValues()
    {
        return [
            self::NTU_PERIOD1_SECOND,
            self::NTU_PERIOD1_MINUTE,
            self::NTU_PERIOD1_HOUR,
            self::NTU_PERIOD1_DAY,
            self::NTU_PERIOD1_MONTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ntu_period1'] = isset($data['ntu_period1']) ? $data['ntu_period1'] : null;
        $this->container['ntu_in_period1_limit'] = isset($data['ntu_in_period1_limit']) ? $data['ntu_in_period1_limit'] : null;
        $this->container['ntu_in_period1'] = isset($data['ntu_in_period1']) ? $data['ntu_in_period1'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNtuPeriod1AllowableValues();
        if (!is_null($this->container['ntu_period1']) && !in_array($this->container['ntu_period1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'ntu_period1', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ntu_period1
     *
     * @return string|null
     */
    public function getNtuPeriod1()
    {
        return $this->container['ntu_period1'];
    }

    /**
     * Sets ntu_period1
     *
     * @param string|null $ntu_period1 A period when limitations apply
     *
     * @return $this
     */
    public function setNtuPeriod1($ntu_period1)
    {
        $allowedValues = $this->getNtuPeriod1AllowableValues();
        if (!is_null($ntu_period1) && !in_array($ntu_period1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ntu_period1', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ntu_period1'] = $ntu_period1;

        return $this;
    }

    /**
     * Gets ntu_in_period1_limit
     *
     * @return int|null
     */
    public function getNtuInPeriod1Limit()
    {
        return $this->container['ntu_in_period1_limit'];
    }

    /**
     * Sets ntu_in_period1_limit
     *
     * @param int|null $ntu_in_period1_limit A maximum number of requests in the specified period
     *
     * @return $this
     */
    public function setNtuInPeriod1Limit($ntu_in_period1_limit)
    {
        $this->container['ntu_in_period1_limit'] = $ntu_in_period1_limit;

        return $this;
    }

    /**
     * Gets ntu_in_period1
     *
     * @return int|null
     */
    public function getNtuInPeriod1()
    {
        return $this->container['ntu_in_period1'];
    }

    /**
     * Sets ntu_in_period1
     *
     * @param int|null $ntu_in_period1 A number of requests that have already been processed
     *
     * @return $this
     */
    public function setNtuInPeriod1($ntu_in_period1)
    {
        $this->container['ntu_in_period1'] = $ntu_in_period1;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


